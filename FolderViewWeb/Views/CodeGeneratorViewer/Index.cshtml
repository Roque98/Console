
<!-- Incluir highlight.js desde un CDN -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>

<!-- and it's easy to individually load additional languages -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/go.min.js"></script>

<script>hljs.highlightAll();</script>



<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper" style="display:grid; grid-template-columns: 1fr; height: 100%">


    <!-- Main content -->
    <section class="" style="margin: 20px">
        <div id="app"></div>

    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->


<script>

    // Obtener el contenedor principal
    const app = document.getElementById("app");

    // Función para hacer una petición AJAX GET
    function fetchData(url) {
        return fetch(url)
            .then(response => response.json())
            .catch(error => console.error('Error al obtener los datos:', error));
    }

    // Función para hacer una petición AJAX POST
    function sendPost(url, body) {
        return fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        }).then(response => response.json())
            .catch(error => console.error('Error al generar el archivo:', error));
    }

    // Función principal para iniciar la generación de formularios
    function iniciarGeneracionArchivos(idProyecto) {
        // Obtener la información del proyecto
        fetchData(`/api/proyecto/${idProyecto}`).then(proyecto => {
            const tipoProyectoId = proyecto.idTipoProyecto;

            // Obtener los prompt templates del tipo de proyecto
            fetchData(`/api/prompttemplate/all/tipoproyecto/${tipoProyectoId}`).then(promptTemplates => {
                // Obtener los archivos ya generados para el proyecto
                fetchData(`/api/archivo/all/proyecto/${idProyecto}`).then(archivosGenerados => {

                    // Iniciar la generación de formularios
                    generarFormulario(promptTemplates, archivosGenerados, 0, idProyecto);
                });
            });
        });
    }

    // Función para generar el formulario basado en los prompt templates
    function generarFormulario(promptTemplates, archivosGenerados, index, idProyecto) {
        if (index >= promptTemplates.length) return; // Terminar si ya se generaron todos los formularios

        console.log(promptTemplates)
        const promptTemplate = promptTemplates[index];
        const formContainer = document.createElement("div");
        formContainer.className = "box box-primary";
        formContainer.style.padding = 20;

        // Crear la cabecera del formulario
        const boxHeader = document.createElement("div");
        boxHeader.className = "box-header with-border";

        const heading = document.createElement("h3");
        heading.className = "box-title";
        heading.textContent = promptTemplates[index].nombre;

        const description = document.createElement("p");
        description.textContent = promptTemplates[index].descripcion;

        boxHeader.appendChild(heading);
        boxHeader.appendChild(description);

        // Insertar la cabecera antes del cuerpo del formulario
        formContainer.appendChild(boxHeader);

        // Verificar si ya existe un archivo generado
        const archivoGenerado = archivosGenerados.find(archivo => archivo.idPromptTemplate === promptTemplate.id);

        if (archivoGenerado) {
            // Mostrar el contenido del archivo si ya fue generado
            const contenidoArchivo = document.createElement("div");
            contenidoArchivo.className = "file-content";
            contenidoArchivo.textContent = archivoGenerado.contenido;
            formContainer.appendChild(contenidoArchivo);
            app.appendChild(formContainer);

            // Generar el siguiente formulario
            generarFormulario(promptTemplates, archivosGenerados, index + 1, idProyecto);
        } else {
            // Obtener los parámetros del prompt template
            fetchData(`/api/parametrosprompttemplate/all/prompttemplate/${promptTemplate.id}`).then(parametros => {
                // Crear el formulario si no hay archivo generado
                const form = document.createElement("form");

                // Crear el cuerpo del formulario siguiendo el formato especificado
                const boxBody = document.createElement("div");
                boxBody.className = "box-body";

                parametros.forEach(parametro => {
                    const formGroup = document.createElement("div");
                    formGroup.className = "form-group";

                    const label = document.createElement("label");
                    label.setAttribute("for", `inputText_${parametro.nombre_parametro}_${promptTemplate.id}`);
                    label.textContent = parametro.label;

                    const textarea = document.createElement("textarea");
                    textarea.className = "form-control";
                    textarea.id = `${parametro.nombre_parametro}${promptTemplate.id}`;
                    textarea.name = parametro.nombre_parametro;  // Añadir el atributo name
                    textarea.placeholder = parametro.placeholder;
                    textarea.rows = 4;

                    formGroup.appendChild(label);
                    formGroup.appendChild(textarea);
                    boxBody.appendChild(formGroup);
                });

                // Añadir el cuerpo del formulario al form
                form.appendChild(boxBody);

                // Crear el pie del formulario con el botón de enviar
                const boxFooter = document.createElement("div");
                boxFooter.className = "box-footer";

                const submitButton = document.createElement("button");
                submitButton.id = `btnSave${promptTemplate.id}`;
                submitButton.type = "submit";
                submitButton.className = "btn btn-primary";
                submitButton.textContent = "Generar código";

                boxFooter.appendChild(submitButton);
                form.appendChild(boxFooter);

                // Manejador del evento de envío
                form.addEventListener("submit", function (event) {
                    event.preventDefault();
                    debugger;
                    // Recolectar los datos del formulario
                    const formData = new FormData(form);
                    console.log(formData)
                    const params = {};
                    formData.forEach((value, key) => {
                        params[key] = value;
                    });

                    // Crear el body para enviar al endpoint de generación
                    const body = {
                        promptTemplate: promptTemplate.prompt,
                        params: params
                    };

                    // Enviar la petición POST para generar el archivo
                    sendPost("http://127.0.0.1:5000/generate/", body).then(response => {
                        debugger;
                        // Limpiar el formulario y mostrar el contenido del archivo generado
                        console.log(response)
                        formContainer.innerHTML = "";
                        //const contenidoArchivo = document.createElement("div");
                        //contenidoArchivo.className = "file-content";
                        //contenidoArchivo.textContent = response.code;
                        //formContainer.appendChild(contenidoArchivo);

                        // Mostrar el contenido del archivo generado
                        const fileHeading = document.createElement("h1");
                        fileHeading.textContent = response.path;

                        const fileContentContainer = document.createElement("div");
                        fileContentContainer.className = "";
                        fileContentContainer.style.marginTop = "30px";

                        // Botón para copiar el código
                        const copyButton = document.createElement("button");
                        copyButton.className = "copy-button";
                        copyButton.textContent = "Copiar";
                        copyButton.setAttribute("onclick", "copyCode(this)");

                        // Botón para descargar el código
                        const downloadButton = document.createElement("button");
                        downloadButton.className = "download-button";
                        downloadButton.textContent = "Descargar";
                        downloadButton.setAttribute("onclick", `downloadCode(this, '${response.path}')`);

                        // Documentación
                        const docHeading = document.createElement("h3");
                        docHeading.textContent = "Documentacion";

                        const docPre = document.createElement("pre");
                        const docCode = document.createElement("code");
                        docCode.className = "language-python";
                        docCode.textContent = response.documentation;
                        docPre.appendChild(docCode);

                        // Código
                        const codeHeading = document.createElement("h3");
                        codeHeading.textContent = "Codigo";

                        const codePre = document.createElement("pre");
                        const codeCode = document.createElement("code");
                        codeCode.className = "language-python";
                        codeCode.textContent = response.code;
                        codePre.appendChild(codeCode);

                        // Agregar los elementos al contenedor
                        fileContentContainer.appendChild(copyButton);
                        fileContentContainer.appendChild(downloadButton);
                        fileContentContainer.appendChild(docHeading);
                        fileContentContainer.appendChild(docPre);
                        fileContentContainer.appendChild(codeHeading);
                        fileContentContainer.appendChild(codePre);

                        // Agregar el encabezado y el contenido al formContainer
                        formContainer.appendChild(fileHeading);
                        formContainer.appendChild(fileContentContainer);


                        // Generar el siguiente formulario
                        generarFormulario(promptTemplates, archivosGenerados, index + 1, idProyecto);
                    });
                });

                formContainer.appendChild(form);
                app.appendChild(formContainer);
            });
        }
    }

    // Iniciar la aplicación con el ID del proyecto (puedes cambiarlo dinámicamente)
    iniciarGeneracionArchivos(1);

</script>